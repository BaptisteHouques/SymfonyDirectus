{% extends "base.html.twig" %}
{% block body %}
    <div class="container">
        <h2>Bloc Informations</h2>
        <div class="row justify-content-center pt-4">
            {# Foreach des blocs d'informations #}
            {% for bloc in bloc_informations %}
                {# Si le bloc contient une relation avec le model Erreur_Service (via le champ Erreur_Bloc) affichage du composant correspondant #}
                {% if bloc.Erreur_Bloc %}
                    {% include 'components/_cards.blocInformation.error.html.twig'
                        with {'id': bloc.id, 'titre': bloc.Titre, 'image': directus_api ~ '/assets/' ~ bloc.ImageArrierePlan, 'errorType': bloc.Erreur_Bloc.CodeJSON_Erreur.Type, 'errorDesc': bloc.Erreur_Bloc.CodeJSON_Erreur.Description, 'image': bloc.ImageArrierePlan ? directus_api ~ '/assets/' ~ bloc.ImageArrierePlan : 'https://www.projetcartylion.fr/app/uploads/2020/08/Placeholder.png'}
                    %}
                {% else %}
                    {% include 'components/_cards.blocInformation.html.twig'
                        with {'id': bloc.id, 'titre': bloc.Titre, 'desc': bloc.Description, 'lien': bloc.Lien, 'image': bloc.ImageArrierePlan ? directus_api ~ '/assets/' ~ bloc.ImageArrierePlan : 'https://www.projetcartylion.fr/app/uploads/2020/08/Placeholder.png'}
                    %}
                {% endif %}
            {% endfor %}
        </div>
    </div>
{% endblock %}
{% block javascripts %}
    <script>
        {# Fonction appelée lors du clique sur le boutton d'un bloc ayant une relation avec le model Erreur_Service
        lui retirant cette relation  #}
        function removeError(id){
            let url = '{{ path('removeBlocError', { 'idBloc': 'fakeId'}) }}'
            url = url.replace('fakeId', id);
            let response;
            let xhr = new XMLHttpRequest();

            xhr.open('GET', url, true);

            xhr.onload = function () {
                response = JSON.parse(this.response)
                console.log(response)

                {# Chercher un moyen d'utiliser la supression et l'ajout des composants existants
                document.getElementById('bloc-'+id).remove();

                let referenceNode = document.getElementById('bloc-6')
                //referenceNode.insertAdjacentHTML('beforebegin', component)

                referenceNode.parentNode.insertBefore(
                        {% include 'components/_cards.blocInformation.error.html.twig'
                            with {'id': 'id', 'titre': 'titre', 'errorType': 'errortype', 'errorDesc': 'errordesc', 'image': 'https://www.projetcartylion.fr/app/uploads/2020/08/Placeholder.png'}
                        %},referenceNode.nextSibling)
                #}

                // Suppression des éléments affichants l'erreur
                document.getElementById('bloc-'+id).getElementsByClassName('description-error')[0].remove()
                document.getElementById('bloc-'+id).getElementsByClassName('type-error')[0].remove()

                // Création d'un élément affichant la description du bloc
                let p = document.createElement('p')
                let pValue = document.createTextNode(response.Description);
                p.appendChild(pValue)
                p.className = "pt-2"

                // Insertion de l'élément créé aprés l'élément affichant le titre du bloc
                let referenceNode = document.getElementsByClassName('card-title')[0]
                referenceNode.parentNode.insertBefore(p, referenceNode.nextSibling)

                let button = document.getElementById('bloc-'+id).getElementsByClassName('btn')[0]
                button.classList.remove('btn-outline-success')
                button.classList.add('btn-outline-danger')
                button.innerHTML = 'Rendre Inaccessible'
                button.removeAttribute('onclick')
            }

            xhr.send();
        }
    </script>
{% endblock %}